## - Use arrow keys. Will probably iterate for other functions.
import pygame
import math

pygame.init()

# Set up the grid and calculate screen size
grid_size = 4
square_size = 150  # Adjust the square size as desired

width = grid_size * square_size
height = grid_size * square_size

screen = pygame.display.set_mode((width, height))
clock = pygame.time.Clock()

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)

rotation_speed = 0.01
rotation_values = [0, 0, 0]
rotation_directions = [0, 0, 0]
scale_factor = 0.8
line_width = int(1 * scale_factor * 1.5)

offset_x = width // 2
offset_y = height // 2

running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                running = False
            elif event.key == pygame.K_UP:
                rotation_directions[0] = 1
            elif event.key == pygame.K_DOWN:
                rotation_directions[0] = -1
            elif event.key == pygame.K_LEFT:
                rotation_directions[1] = 1
            elif event.key == pygame.K_RIGHT:
                rotation_directions[1] = -1
            elif event.key == pygame.K_z:
                rotation_directions[2] = 1
            elif event.key == pygame.K_x:
                rotation_directions[2] = -1

        elif event.type == pygame.KEYUP:
            if event.key == pygame.K_UP or event.key == pygame.K_DOWN:
                rotation_directions[0] = 0
            elif event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                rotation_directions[1] = 0
            elif event.key == pygame.K_z or event.key == pygame.K_x:
                rotation_directions[2] = 0

    for i in range(3):
        rotation_values[i] += rotation_speed * rotation_directions[i]

    screen.fill(BLACK)

    for i in range(grid_size):
        for j in range(grid_size):
            for k in range(grid_size):
                x = (j - grid_size // 2) * square_size
                y = (i - grid_size // 2) * square_size
                z = (k - grid_size // 2) * square_size

                rotated_x = math.cos(rotation_values[0]) * x - math.sin(rotation_values[1]) * y
                rotated_y = math.sin(rotation_values[1]) * x + math.cos(rotation_values[0]) * y
                rotated_z = math.cos(rotation_values[2]) * z

                scaled_x = rotated_x * scale_factor + offset_x
                scaled_y = rotated_y * scale_factor + offset_y
                scaled_z = rotated_z * scale_factor

                pygame.draw.rect(screen, WHITE, (scaled_x, scaled_y, square_size * scale_factor, square_size * scale_factor), line_width)

    pygame.display.flip()
    clock.tick(60)

pygame.quit()
